#!/usr/bin/env python

import sys
import optparse
import re

import color

class HighlightLine(object):
    _hi_matcher = re.compile(r'''
        (?P<head>\s*"?\s*)     # catches commented-out lines also
        (?P<command>
            hi(g(h(l(i(g(ht?)?)?)?)?)?)?
            \s+
        )
        (?P<groupname>[A-Za-z0-9]+)
        (?P<params>(
            \s+
            (cterm[fb]g|c?term|start|stop|gui(fg|bg|sp)?|font)
            =
            [^ \t\n]+          # NOTE: doesn't match quoted values
        )+)
        (?P<tail>
            [ \t]*             # optional whitespace
            ("[^\n]*)?         # optional comment
            \n?                # optional newline
        )
    ''', re.VERBOSE)

    def __init__(self, line, dark=True):
        m = self._hi_matcher.match(line)
        if m is None:
            raise NoHighlightMatch()

        group = m.group('groupname')

        self._head = '%s%s%s' % (m.group('head'), m.group('command'),
                                 group)
        self._params = m.group('params')
        self._tail = m.group('tail')
        if dark:
            self._defaults = self._dark_defaults.get(group, {})
        else:
            self._defaults = self._light_defaults.get(group, {})

    _param_matcher = re.compile(r'''
        (?P<param>(cterm[fb]g|c?term|start|stop|gui(fg|bg|sp)?|font))
        =
        (?P<value>[^ \t]+)
    ''', re.VERBOSE)

    def get_param(self, param):
        '''
        Return the value for the given param, or None if the param doesn't
        exist in the line.
        '''
        for m in self._param_matcher.finditer(self._params):
            if m.group('param') == param:
                return m.group('value')

        return self._defaults.get(param)

    def _replace(self, new_params, match):
        '''
        Helper for updated().
        '''
        param = match.group('param')
        if param in new_params:
            value = new_params[param]
            new_params.pop(param)
            return '%s=%s' % (param, value)
        else:
            return match.group()

    def updated(self, new_params):
        '''
        Return a new line using new_params. The new parameters replace
        existing parameters when possible, or they get appended to the line.
        '''
        unused_params = dict(new_params)
        repl = lambda m: self._replace(unused_params, m)
        param_str = self._param_matcher.sub(repl, self._params)

        append_params = ' '.join('%s=%s' % (param, value)
                                 for (param, value) in unused_params.items())
        if append_params:
            append_params = ' ' + append_params

        return '%s%s%s%s' % (self._head, param_str, append_params, self._tail)

    _defaults = {
        'NonText' : {'gui' : 'bold', 'guifg' : 'Blue'},
        'ErrorMsg' : {'guifg' : 'White', 'guibg' : 'Red'},
        'IncSearch' : {'gui' : 'reverse'},
        'ModeMsg' : {'gui' : 'bold'},
        'StatusLine' : {'gui' : 'bold,reverse'},
        'StatusLineNC' : {'gui' : 'reverse'},
        'VertSplit' : {'gui' : 'reverse'},
        'VisualNOS' : {'gui' : 'bold,underline'},
        'WildMenu' : {'guifg' : 'Black', 'guibg' : 'Yellow'},
        'DiffText' : {'gui' : 'bold', 'guibg' : 'Red'},
        'PmenuSbar' : {'guibg' : 'Grey'},
        'PmenuThumb' : {'gui' : 'reverse'},
        'TabLineSel' : {'gui' : 'bold'},
        'TabLineFill' : {'gui' : 'reverse'},
        'Cursor' : {'guifg' : 'bg', 'guibg' : 'fg'},
        'lCursor' : {'guifg' : 'bg', 'guibg' : 'fg'},
        'Error' : {'guifg' : 'White', 'guibg' : 'Red'},
    }

    _dark_defaults = {
        'SpecialKey' : {'guifg' : 'Cyan'},
        'Directory' : {'guifg' : 'Cyan'},
        'Search' : {'guifg' : 'Black', 'guibg' : 'Yellow'},
        'MoreMsg' : {'gui' : 'bold', 'guifg' : 'SeaGreen'},
        'LineNr' : {'guifg' : 'Yellow'},
        'Question' : {'gui' : 'bold', 'guifg' : 'Green'},
        'Title' : {'gui' : 'bold', 'guifg' : 'Magenta'},
        'Visual' : {'guibg' : 'DarkGrey'},
        'WarningMsg' : {'guifg' : 'Red'},
        'Folded' : {'guifg' : 'Cyan', 'guibg' : 'DarkGrey'},
        'FoldColumn' : {'guifg' : 'Cyan', 'guibg' : 'Grey'},
        'DiffAdd' : {'guibg' : 'DarkBlue'},
        'DiffChange' : {'guibg' : 'DarkMagenta'},
        'DiffDelete' : {'gui' : 'bold', 'guifg' : 'Blue', 'guibg' : 'DarkCyan'},
        'SignColumn' : {'guifg' : 'Cyan', 'guibg' : 'Grey'},
        'SpellBad' : {'gui' : 'undercurl', 'guisp' : 'Red'},
        'SpellCap' : {'gui' : 'undercurl', 'guisp' : 'Blue'},
        'SpellRare' : {'gui' : 'undercurl', 'guisp' : 'Magenta'},
        'SpellLocal' : {'gui' : 'undercurl', 'guisp' : 'Cyan'},
        'Pmenu' : {'guibg' : 'Magenta'},
        'PmenuSel' : {'guibg' : 'DarkGrey'},
        'TabLine' : {'gui' : 'underline', 'guibg' : 'DarkGrey'},
        'CursorColumn' : {'guibg' : 'Grey40'},
        'CursorLine' : {'guibg' : 'Grey40'},
        'MatchParen' : {'guibg' : 'DarkCyan'},
        'Comment' : {'guifg' : '#80a0ff'},
        'Constant' : {'guifg' : '#ffa0a0'},
        'Special' : {'guifg' : 'Orange'},
        'Identifier' : {'guifg' : '#40ffff'},
        'Statement' : {'gui' : 'bold', 'guifg' : '#ffff60'},
        'PreProc' : {'guifg' : '#ff80ff'},
        'Type' : {'gui' : 'bold', 'guifg' : '#60ff60'},
        'Underlined' : {'gui' : 'underline', 'guifg' : '#80a0ff'},
        'Ignore' : {'guifg' : 'bg'},
    }
    _dark_defaults.update(_defaults)

    _light_defaults = {
        'SpecialKey' : {'guifg' : 'Cyan'},
        'Directory' : {'guifg' : 'Cyan'},
        'Search' : {'guifg' : 'Black', 'guibg' : 'Yellow'},
        'MoreMsg' : {'gui' : 'bold', 'guifg' : 'SeaGreen'},
        'LineNr' : {'guifg' : 'Yellow'},
        'Question' : {'gui' : 'bold', 'guifg' : 'Green'},
        'Title' : {'gui' : 'bold', 'guifg' : 'Magenta'},
        'Visual' : {'guibg' : 'DarkGrey'},
        'WarningMsg' : {'guifg' : 'Red'},
        'Folded' : {'guifg' : 'Cyan', 'guibg' : 'DarkGrey'},
        'FoldColumn' : {'guifg' : 'Cyan', 'guibg' : 'Grey'},
        'DiffAdd' : {'guibg' : 'DarkBlue'},
        'DiffChange' : {'guibg' : 'DarkMagenta'},
        'DiffDelete' : {'gui' : 'bold', 'guifg' : 'Blue', 'guibg' : 'DarkCyan'},
        'SignColumn' : {'guifg' : 'Cyan', 'guibg' : 'Grey'},
        'SpellBad' : {'gui' : 'undercurl', 'guisp' : 'Red'},
        'SpellCap' : {'gui' : 'undercurl', 'guisp' : 'Blue'},
        'SpellRare' : {'gui' : 'undercurl', 'guisp' : 'Magenta'},
        'SpellLocal' : {'gui' : 'undercurl', 'guisp' : 'Cyan'},
        'Pmenu' : {'guibg' : 'Magenta'},
        'PmenuSel' : {'guibg' : 'DarkGrey'},
        'TabLine' : {'gui' : 'underline', 'guibg' : 'DarkGrey'},
        'CursorColumn' : {'guibg' : 'Grey40'},
        'CursorLine' : {'guibg' : 'Grey40'},
        'MatchParen' : {'guibg' : 'DarkCyan'},
        'Comment' : {'guifg' : '#80a0ff'},
        'Constant' : {'guifg' : '#ffa0a0'},
        'Special' : {'guifg' : 'Orange'},
        'Identifier' : {'guifg' : '#40ffff'},
        'Statement' : {'gui' : 'bold', 'guifg' : '#ffff60'},
        'PreProc' : {'guifg' : '#ff80ff'},
        'Type' : {'gui' : 'bold', 'guifg' : '#60ff60'},
        'Underlined' : {'gui' : 'underline', 'guifg' : '#80a0ff'},
        'Ignore' : {'guifg' : 'bg'},
    }
    _light_defaults.update(_defaults)

class NoHighlightMatch(ValueError):
    pass

def cterm_color(gui_color):
    '''
    Return the cterm color corresponding to gui_color. This might not be a
    color at all if gui_color is none, fg, or bg.
    '''
    if gui_color.lower() in ('none', 'fg', 'bg'):
        return gui_color

    c = color.Color.from_string(gui_color)
    return c.nearest_xterm()

def cterm_attrs(gui_attrs):
    '''
    Return the cterm attributes based on gui_attrs. This means dropping
    attributes that don't work on the terminal.
    '''
    if gui_attrs.lower() == 'none':
        return gui_attrs

    attrs = [attr.strip() for attr in gui_attrs.split(',')]
    new_attrs = []
    for attr in attrs:
        if attr.lower() in ('bold', 'underline', 'reverse', 'inverse'):
            new_attrs.append(attr)

    if new_attrs:
        return ','.join(new_attrs)
    else:
        return 'NONE'

def find_params(hl):
    '''
    Find cterm parameters based on existing gui parameters.
    '''
    result = {}

    gui = hl.get_param('gui')
    if gui:
        result['cterm'] = cterm_attrs(gui)

    guifg = hl.get_param('guifg')
    if guifg:
        result['ctermfg'] = cterm_color(guifg)

    guibg = hl.get_param('guibg')
    if guibg:
        result['ctermbg'] = cterm_color(guibg)

    return result

def parse_args(args):
    parser = optparse.OptionParser()

    parser.add_option('-l', '--light', action='store_true',
        help='use light background defaults')

    (opts, arguments) = parser.parse_args(args)
    return (opts, arguments)

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    global opts
    (opts, arguments) = parse_args(args)

    assert len(arguments) == 1
    filename = arguments[0]

    dark = not opts.light

    for line in open(filename):
        try:
            hl = HighlightLine(line, dark)
            params = find_params(hl)
            sys.stdout.write(hl.updated(params))
        except NoHighlightMatch:
            sys.stdout.write(line)

    return 0

if __name__ == '__main__':
    sys.exit(main())
