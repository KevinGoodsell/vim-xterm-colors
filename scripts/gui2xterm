#!/usr/bin/env python

import sys
import optparse
import re

import color

class ColorSchemeSettings(object):
    def __init__(self):
        self._settings = {} # {'GroupName' : {'param' : 'value'}}

    def add(self, group, param, value):
        params = self._settings.setdefault(group, {})
        params[param] = value

    def remove(self, group, param=None):
        if param is None:
            self._settings.pop(group, None)
        else:
            params = self._settings.get(group)
            if params is None:
                return
            params.pop(param, None)

    def get(self, group, param, default=None):
        params = self._settings.get(group)
        if params is None:
            return default
        else:
            return params.get(param, default)

    def get_group(self, group, default=None):
        return self._settings.get(group, default)

    def update(self, other):
        if isinstance(other, ColorSchemeSettings):
            other = other._settings

        for (group, value) in other.items():
            params = self._settings.setdefault(group, {})
            params.update(value)

    def copy(self):
        new = ColorSchemeDefaults()
        new.update(self)
        return new

    def __sub__(self, other):
        new = self.copy()
        for (group, params) in other._settings.items():
            new_params = new._settings.get(group, {})
            for pname in params.keys():
                new_params.pop(pname, None)
            if not new_params:
                new._settings.pop(group, None)

        return new

    def items(self):
        result = []
        for (group, params) in self._settings.items():
            for (pname, pval) in params.items():
                result.append((group, pname, pval))

        return result

    def groups(self):
        return self._settings.keys()

    def __nonzero__(self):
        return bool(self._settings)

class ColorSchemeDefaults(ColorSchemeSettings):
    _common_defaults = {
        'Cursor' : {'guibg' : 'fg', 'guifg' : 'bg'},
        'CursorLine' : {'cterm' : 'underline'},
        'DiffDelete' : {'ctermfg' : '12', 'gui' : 'bold', 'guifg' : 'Blue'},
        'DiffText' : {'cterm' : 'bold', 'ctermbg' : '9', 'gui' : 'bold',
                      'guibg' : 'Red'},
        'Error' : {'ctermbg' : '9', 'ctermfg' : '15', 'guibg' : 'Red',
                   'guifg' : 'White'},
        'ErrorMsg' : {'ctermbg' : '1', 'ctermfg' : '15', 'guibg' : 'Red',
                      'guifg' : 'White'},
        'FoldColumn' : {'guibg' : 'Grey'},
        'Ignore' : {'guifg' : 'bg'},
        'IncSearch' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'ModeMsg' : {'cterm' : 'bold', 'gui' : 'bold'},
        'MoreMsg' : {'gui' : 'bold', 'guifg' : 'SeaGreen'},
        'NonText' : {'ctermfg' : '12', 'gui' : 'bold', 'guifg' : 'Blue'},
        'PmenuSbar' : {'ctermbg' : '248', 'guibg' : 'Grey'},
        'PmenuThumb' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'Question' : {'gui' : 'bold'},
        'Search' : {'ctermbg' : '11', 'guibg' : 'Yellow'},
        'SignColumn' : {'guibg' : 'Grey'},
        'SpellBad' : {'gui' : 'undercurl', 'guisp' : 'Red'},
        'SpellCap' : {'gui' : 'undercurl', 'guisp' : 'Blue'},
        'SpellLocal' : {'ctermbg' : '14', 'gui' : 'undercurl'},
        'SpellRare' : {'gui' : 'undercurl', 'guisp' : 'Magenta'},
        'Statement' : {'gui' : 'bold'},
        'StatusLine' : {'cterm' : 'bold,reverse', 'gui' : 'bold,reverse'},
        'StatusLineNC' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'TabLine' : {'cterm' : 'underline', 'gui' : 'underline'},
        'TabLineFill' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'TabLineSel' : {'cterm' : 'bold', 'gui' : 'bold'},
        'Title' : {'gui' : 'bold', 'guifg' : 'Magenta'},
        'Todo' : {'ctermbg' : '11', 'ctermfg' : '0', 'guibg' : 'Yellow',
                  'guifg' : 'Blue'},
        'Type' : {'gui' : 'bold'},
        'Underlined' : {'cterm' : 'underline', 'gui' : 'underline'},
        'VertSplit' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'VisualNOS' : {'cterm' : 'bold,underline', 'gui' : 'bold,underline'},
        'WarningMsg' : {'guifg' : 'Red'},
        'WildMenu' : {'ctermbg' : '11', 'ctermfg' : '0', 'guibg' : 'Yellow',
                      'guifg' : 'Black'},
        'lCursor' : {'guibg' : 'fg', 'guifg' : 'bg'},
    }
    _defaults = {} # To be replaced in derived classes

    def __init__(self, fill_empty=False):
        ColorSchemeSettings.__init__(self)
        self.update(self._common_defaults)
        self.update(self._defaults)

        if fill_empty:
            self._fill()

    def _fill(self):
        for group in self.groups():
            params = self._settings[group]
            for param in ['cterm', 'ctermfg', 'ctermbg', 'gui', 'guifg',
                          'guibg', 'guisp']:
                params.setdefault(param, 'NONE')

class DarkColorSchemeDefaults(ColorSchemeDefaults):
    _defaults = {
        'Comment' : {'ctermfg' : '14', 'guifg' : '#80a0ff'},
        'Constant' : {'ctermfg' : '13', 'guifg' : '#ffa0a0'},
        'CursorColumn' : {'ctermbg' : '242', 'guibg' : 'Grey40'},
        'CursorLine' : {'guibg' : 'Grey40'},
        'DiffAdd' : {'ctermbg' : '4', 'guibg' : 'DarkBlue'},
        'DiffChange' : {'ctermbg' : '5', 'guibg' : 'DarkMagenta'},
        'DiffDelete' : {'ctermbg' : '6', 'guibg' : 'DarkCyan'},
        'Directory' : {'ctermfg' : '159', 'guifg' : 'Cyan'},
        'FoldColumn' : {'ctermbg' : '242', 'ctermfg' : '14', 'guifg' : 'Cyan'},
        'Folded' : {'ctermbg' : '242', 'ctermfg' : '14', 'guibg' : 'DarkGrey',
                    'guifg' : 'Cyan'},
        'Identifier' : {'cterm' : 'bold', 'ctermfg' : '14',
                        'guifg' : '#40ffff'},
        'Ignore' : {'ctermfg' : '0'},
        'LineNr' : {'ctermfg' : '11', 'guifg' : 'Yellow'},
        'MatchParen' : {'ctermbg' : '6', 'guibg' : 'DarkCyan'},
        'MoreMsg' : {'ctermfg' : '121'},
        'Pmenu' : {'ctermbg' : '13', 'guibg' : 'Magenta'},
        'PmenuSel' : {'ctermbg' : '242', 'guibg' : 'DarkGrey'},
        'PreProc' : {'ctermfg' : '81', 'guifg' : '#ff80ff'},
        'Question' : {'ctermfg' : '121', 'guifg' : 'Green'},
        'Search' : {'ctermfg' : '0', 'guifg' : 'Black'},
        'SignColumn' : {'ctermbg' : '242', 'ctermfg' : '14', 'guifg' : 'Cyan'},
        'Special' : {'ctermfg' : '224', 'guifg' : 'Orange'},
        'SpecialKey' : {'ctermfg' : '81', 'guifg' : 'Cyan'},
        'SpellBad' : {'ctermbg' : '9'},
        'SpellCap' : {'ctermbg' : '12'},
        'SpellLocal' : {'guisp' : 'Cyan'},
        'SpellRare' : {'ctermbg' : '13'},
        'Statement' : {'ctermfg' : '11', 'guifg' : '#ffff60'},
        'TabLine' : {'ctermbg' : '242', 'ctermfg' : '15',
                     'guibg' : 'DarkGrey'},
        'Title' : {'ctermfg' : '225'},
        'Type' : {'ctermfg' : '121', 'guifg' : '#60ff60'},
        'Underlined' : {'ctermfg' : '81', 'guifg' : '#80a0ff'},
        'Visual' : {'ctermbg' : '242', 'guibg' : 'DarkGrey'},
        'WarningMsg' : {'ctermfg' : '224'},
    }

class LightColorSchemeDefaults(ColorSchemeDefaults):
    _defaults = {
        'Comment' : {'ctermfg' : '4', 'guifg' : 'Blue'},
        'Constant' : {'ctermfg' : '1', 'guifg' : 'Magenta'},
        'CursorColumn' : {'ctermbg' : '7', 'guibg' : 'Grey90'},
        'CursorLine' : {'guibg' : 'Grey90'},
        'DiffAdd' : {'ctermbg' : '81', 'guibg' : 'LightBlue'},
        'DiffChange' : {'ctermbg' : '225', 'guibg' : 'LightMagenta'},
        'DiffDelete' : {'ctermbg' : '159', 'guibg' : 'LightCyan'},
        'Directory' : {'ctermfg' : '4', 'guifg' : 'Blue'},
        'FoldColumn' : {'ctermbg' : '248', 'ctermfg' : '4',
                        'guifg' : 'DarkBlue'},
        'Folded' : {'ctermbg' : '248', 'ctermfg' : '4', 'guibg' : 'LightGrey',
                    'guifg' : 'DarkBlue'},
        'Identifier' : {'ctermfg' : '6', 'guifg' : 'DarkCyan'},
        'Ignore' : {'ctermfg' : '15'},
        'LineNr' : {'ctermfg' : '130', 'guifg' : 'Brown'},
        'MatchParen' : {'ctermbg' : '14', 'guibg' : 'Cyan'},
        'MoreMsg' : {'ctermfg' : '2'},
        'Pmenu' : {'ctermbg' : '225', 'guibg' : 'LightMagenta'},
        'PmenuSel' : {'ctermbg' : '7', 'guibg' : 'Grey'},
        'PreProc' : {'ctermfg' : '5', 'guifg' : 'Purple'},
        'Question' : {'ctermfg' : '2', 'guifg' : 'SeaGreen'},
        'SignColumn' : {'ctermbg' : '248', 'ctermfg' : '4',
                        'guifg' : 'DarkBlue'},
        'Special' : {'ctermfg' : '5', 'guifg' : 'SlateBlue'},
        'SpecialKey' : {'ctermfg' : '4', 'guifg' : 'Blue'},
        'SpellBad' : {'ctermbg' : '224'},
        'SpellCap' : {'ctermbg' : '81'},
        'SpellLocal' : {'guisp' : 'DarkCyan'},
        'SpellRare' : {'ctermbg' : '225'},
        'Statement' : {'ctermfg' : '130', 'guifg' : 'Brown'},
        'TabLine' : {'ctermbg' : '7', 'ctermfg' : '0', 'guibg' : 'LightGrey'},
        'Title' : {'ctermfg' : '5'},
        'Type' : {'ctermfg' : '2', 'guifg' : 'SeaGreen'},
        'Underlined' : {'ctermfg' : '5', 'guifg' : 'SlateBlue'},
        'Visual' : {'ctermbg' : '7', 'guibg' : 'LightGrey'},
        'WarningMsg' : {'ctermfg' : '1'},
    }

class HighlightLine(object):
    _hi_matcher = re.compile(r'''
        (?P<head>\s*"?\s*)     # catches commented-out lines also
        (?P<command>
            hi(g(h(l(i(g(ht?)?)?)?)?)?)?
            \s+
        )
        (?P<groupname>[A-Za-z0-9]+)
        (?P<params>(
            \s+
            (cterm[fb]g|c?term|start|stop|gui(fg|bg|sp)?|font)
            =
            [^ \t\n]+          # NOTE: doesn't match quoted values
        )+)
        (?P<tail>
            [ \t]*             # optional whitespace
            ("[^\n]*)?         # optional comment
            \n?                # optional newline
        )
    ''', re.VERBOSE)

    def __init__(self, line):
        m = self._hi_matcher.match(line)
        if m is None:
            raise NoHighlightMatch()

        self.group = m.group('groupname')
        head = m.group('head')

        self._head = '%s%s%s' % (head, m.group('command'), self.group)
        self._params = m.group('params')
        self._tail = m.group('tail')
        self.comment = '"' in head

    _param_matcher = re.compile(r'''
        (?P<param>(cterm[fb]g|c?term|start|stop|gui(fg|bg|sp)?|font))
        =
        (?P<value>[^ \t]+)
    ''', re.VERBOSE)

    def get_param(self, param):
        '''
        Return the value for the given param, or None if the param doesn't
        exist in the line.
        '''
        for m in self._param_matcher.finditer(self._params):
            if m.group('param') == param:
                return m.group('value')

        return None

    def _replace(self, new_params, match):
        '''
        Helper for updated().
        '''
        param = match.group('param')
        if param in new_params:
            value = new_params[param]
            new_params.pop(param)
            return '%s=%s' % (param, value)
        else:
            return match.group()

    def updated(self, new_params):
        '''
        Return a new line using new_params. The new parameters replace
        existing parameters when possible, or they get appended to the line.
        '''
        unused_params = dict(new_params)
        repl = lambda m: self._replace(unused_params, m)
        param_str = self._param_matcher.sub(repl, self._params)

        append_params = ' '.join('%s=%s' % (param, value)
                                 for (param, value) in unused_params.items())
        if append_params:
            append_params = ' ' + append_params

        return '%s%s%s%s' % (self._head, param_str, append_params, self._tail)

class NoHighlightMatch(ValueError):
    pass

def cterm_color(gui_color):
    '''
    Return the cterm color corresponding to gui_color. This might not be a
    color at all if gui_color is none, fg, or bg.
    '''
    if gui_color.lower() in ('none', 'fg', 'bg'):
        return gui_color

    c = color.Color.from_string(gui_color)
    return c.nearest_xterm()

def cterm_attrs(gui_attrs):
    '''
    Return the cterm attributes based on gui_attrs. This means dropping
    attributes that don't work on the terminal.
    '''
    if gui_attrs.lower() == 'none':
        return gui_attrs

    attrs = [attr.strip() for attr in gui_attrs.split(',')]
    new_attrs = []
    for attr in attrs:
        if attr.lower() in ('bold', 'underline', 'reverse', 'inverse'):
            new_attrs.append(attr)

    if new_attrs:
        return ','.join(new_attrs)
    else:
        return 'NONE'

def find_params(hl):
    '''
    Find cterm parameters based on existing gui parameters.
    '''
    result = {}

    undercurl = None
    gui = hl.get_param('gui')
    if gui:
        result['cterm'] = cterm_attrs(gui)

        if 'undercurl' in gui:
            undercurl = hl.get_param('guisp')

    guifg = hl.get_param('guifg')
    if guifg:
        result['ctermfg'] = cterm_color(guifg)

    guibg = hl.get_param('guibg')
    if guibg:
        result['ctermbg'] = cterm_color(guibg)
    elif undercurl:
        # Fall back on undercurl color
        result['ctermbg'] = cterm_color(undercurl)

    return result

def check_defaults(settings, dark):
    '''
    Try to find defaults that won't display correctly, write to stderr.
    Note that settings contains *only* the cterm settings that have been
    calculated by the script, no gui settings.
    '''
    if dark:
        defaults = DarkColorSchemeDefaults(fill_empty=True)
    else:
        defaults = LightColorSchemeDefaults(fill_empty=True)

    still_defaults = defaults - settings

    # Compare remaining cterm defaults against the corresponding gui defaults.
    # Often these won't match. This can be fixed by adding the gui defaults as
    # explicit settings in the colorscheme (which the script will then
    # translate to matching cterm settings).
    recommended = ColorSchemeSettings()
    for (group, param, val) in still_defaults.items():
        if param == 'cterm':
            # gui attributes need to be converted to cterm versions for
            # comparison. It's also important that 'gui=NONE' gets used if
            # there's no gui default.
            gui = defaults.get(group, 'gui')
            if val != cterm_attrs(gui):
                recommended.add(group, 'gui', gui)
        elif param == 'ctermfg':
            # ctermfg colors are assumed to not match. They usually don't.
            guifg = defaults.get(group, 'guifg')
            if val != 'NONE' or guifg != 'NONE':
                recommended.add(group, 'guifg', guifg)
        elif param == 'ctermbg':
            # ctermbg colors are also assumed to not match, but gui+guisp is
            # used as a substitute when guibg doesn't exist (but only if gui
            # includes undercurl). This makes the cterm background match the
            # gui undercurl color.
            guibg = defaults.get(group, 'guibg')
            if guibg != 'NONE':
                recommended.add(group, 'guibg', guibg)
            else:
                gui = defaults.get(group, 'gui')
                guisp = defaults.get(group, 'guisp')
                if 'undercurl' in gui and guisp != 'NONE':
                    recommended.add(group, 'gui', gui)
                    recommended.add(group, 'guisp', guisp)

    if recommended:
        print >> sys.stderr, "Warning: some default values won't look right."
        print >> sys.stderr, 'You might want to try adding these:'
        for group in recommended.groups():
            params = recommended.get_group(group)
            param_str = ' '.join('%s=%s' % (pname, pval)
                                 for (pname, pval) in params.items())
            line = 'hi %s %s' % (group, param_str)
            print >> sys.stderr, line

def parse_args(args):
    parser = optparse.OptionParser()

    parser.add_option('-l', '--light', action='store_true',
        help='use light background defaults')

    (opts, arguments) = parser.parse_args(args)
    return (opts, arguments)

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    global opts
    (opts, arguments) = parse_args(args)

    assert len(arguments) == 1
    filename = arguments[0]

    dark = not opts.light

    settings = ColorSchemeSettings()

    for line in open(filename):
        try:
            hl = HighlightLine(line)
            params = find_params(hl)
            sys.stdout.write(hl.updated(params))
            if not hl.comment:
                for (param, val) in params.items():
                    settings.add(hl.group, param, val)
        except NoHighlightMatch:
            sys.stdout.write(line)

    check_defaults(settings, dark)

    return 0

if __name__ == '__main__':
    sys.exit(main())
