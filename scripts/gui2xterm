#!/usr/bin/env python

import sys
import optparse
import re

import color

class ColorSchemeSettings(object):
    def __init__(self):
        self._settings = {} # {'GroupName' : {'param' : 'value'}}

    def add(self, group, param, value):
        group = self.normalize_group(group)
        param = param.lower()
        value = self.normalize_value(value)
        params = self._settings.setdefault(group, {})
        params[param] = value

    def remove(self, group, param=None):
        if param is None:
            self._settings.pop(group, None)
        else:
            params = self._settings.get(group)
            if params is None:
                return
            params.pop(param, None)

    def get(self, group, param, default=None):
        params = self._settings.get(group)
        if params is None:
            return default
        else:
            return params.get(param, default)

    def get_group(self, group, default=None):
        return self._settings.get(group, default)

    def update(self, other):
        if isinstance(other, ColorSchemeSettings):
            other = other._settings

        for (group, params) in other.items():
            for (pname, pval) in params.items():
                self.add(group, pname, pval)

    def copy(self):
        new = ColorSchemeSettings()
        new.update(self)
        return new

    def __sub__(self, other):
        new = self.copy()
        for (group, params) in other._settings.items():
            new_params = new._settings.get(group, {})
            for pname in params.keys():
                new_params.pop(pname, None)
            if not new_params:
                new._settings.pop(group, None)

        return new

    def items(self):
        result = []
        for (group, params) in self._settings.items():
            for (pname, pval) in params.items():
                result.append((group, pname, pval))

        return result

    def groups(self):
        return self._settings.keys()

    def __nonzero__(self):
        return bool(self._settings)

    def fill(self):
        '''
        Add explicit '=NONE' for all missing params.
        '''
        for group in self.groups():
            params = self._settings[group]
            for param in ['cterm', 'ctermfg', 'ctermbg', 'gui', 'guifg',
                          'guibg', 'guisp']:
                params.setdefault(param, 'NONE')

    @classmethod
    def dark_defaults(cls):
        new = cls()
        new.update(cls._common_defaults)
        new.update(cls._dark_defaults)
        new.fill()
        return new

    @classmethod
    def light_defaults(cls):
        new = cls()
        new.update(cls._common_defaults)
        new.update(cls._light_defaults)
        new.fill()
        return new

    @classmethod
    def normalize_value(cls, val):
        result = val.lower()
        if result == 'none':
            result = 'NONE'
        return result

    @classmethod
    def normalize_group(cls, group):
        return cls._group_map.get(group.lower(), group)

    _common_defaults = {
        'Cursor' : {'guibg' : 'fg', 'guifg' : 'bg'},
        'CursorLine' : {'cterm' : 'underline'},
        'DiffDelete' : {'ctermfg' : '12', 'gui' : 'bold', 'guifg' : 'Blue'},
        'DiffText' : {'cterm' : 'bold', 'ctermbg' : '9', 'gui' : 'bold',
                      'guibg' : 'Red'},
        'Error' : {'ctermbg' : '9', 'ctermfg' : '15', 'guibg' : 'Red',
                   'guifg' : 'White'},
        'ErrorMsg' : {'ctermbg' : '1', 'ctermfg' : '15', 'guibg' : 'Red',
                      'guifg' : 'White'},
        'FoldColumn' : {'guibg' : 'Grey'},
        'Ignore' : {'guifg' : 'bg'},
        'IncSearch' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'ModeMsg' : {'cterm' : 'bold', 'gui' : 'bold'},
        'MoreMsg' : {'gui' : 'bold', 'guifg' : 'SeaGreen'},
        'NonText' : {'ctermfg' : '12', 'gui' : 'bold', 'guifg' : 'Blue'},
        'PmenuSbar' : {'ctermbg' : '248', 'guibg' : 'Grey'},
        'PmenuThumb' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'Question' : {'gui' : 'bold'},
        'Search' : {'ctermbg' : '11', 'guibg' : 'Yellow'},
        'SignColumn' : {'guibg' : 'Grey'},
        'SpellBad' : {'gui' : 'undercurl', 'guisp' : 'Red'},
        'SpellCap' : {'gui' : 'undercurl', 'guisp' : 'Blue'},
        'SpellLocal' : {'ctermbg' : '14', 'gui' : 'undercurl'},
        'SpellRare' : {'gui' : 'undercurl', 'guisp' : 'Magenta'},
        'Statement' : {'gui' : 'bold'},
        'StatusLine' : {'cterm' : 'bold,reverse', 'gui' : 'bold,reverse'},
        'StatusLineNC' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'TabLine' : {'cterm' : 'underline', 'gui' : 'underline'},
        'TabLineFill' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'TabLineSel' : {'cterm' : 'bold', 'gui' : 'bold'},
        'Title' : {'gui' : 'bold', 'guifg' : 'Magenta'},
        'Todo' : {'ctermbg' : '11', 'ctermfg' : '0', 'guibg' : 'Yellow',
                  'guifg' : 'Blue'},
        'Type' : {'gui' : 'bold'},
        'Underlined' : {'cterm' : 'underline', 'gui' : 'underline'},
        'VertSplit' : {'cterm' : 'reverse', 'gui' : 'reverse'},
        'VisualNOS' : {'cterm' : 'bold,underline', 'gui' : 'bold,underline'},
        'WarningMsg' : {'guifg' : 'Red'},
        'WildMenu' : {'ctermbg' : '11', 'ctermfg' : '0', 'guibg' : 'Yellow',
                      'guifg' : 'Black'},
        'lCursor' : {'guibg' : 'fg', 'guifg' : 'bg'},
    }

    _dark_defaults = {
        'Comment' : {'ctermfg' : '14', 'guifg' : '#80a0ff'},
        'Constant' : {'ctermfg' : '13', 'guifg' : '#ffa0a0'},
        'CursorColumn' : {'ctermbg' : '242', 'guibg' : 'Grey40'},
        'CursorLine' : {'guibg' : 'Grey40'},
        'DiffAdd' : {'ctermbg' : '4', 'guibg' : 'DarkBlue'},
        'DiffChange' : {'ctermbg' : '5', 'guibg' : 'DarkMagenta'},
        'DiffDelete' : {'ctermbg' : '6', 'guibg' : 'DarkCyan'},
        'Directory' : {'ctermfg' : '159', 'guifg' : 'Cyan'},
        'FoldColumn' : {'ctermbg' : '242', 'ctermfg' : '14', 'guifg' : 'Cyan'},
        'Folded' : {'ctermbg' : '242', 'ctermfg' : '14', 'guibg' : 'DarkGrey',
                    'guifg' : 'Cyan'},
        'Identifier' : {'cterm' : 'bold', 'ctermfg' : '14',
                        'guifg' : '#40ffff'},
        'Ignore' : {'ctermfg' : '0'},
        'LineNr' : {'ctermfg' : '11', 'guifg' : 'Yellow'},
        'MatchParen' : {'ctermbg' : '6', 'guibg' : 'DarkCyan'},
        'MoreMsg' : {'ctermfg' : '121'},
        'Pmenu' : {'ctermbg' : '13', 'guibg' : 'Magenta'},
        'PmenuSel' : {'ctermbg' : '242', 'guibg' : 'DarkGrey'},
        'PreProc' : {'ctermfg' : '81', 'guifg' : '#ff80ff'},
        'Question' : {'ctermfg' : '121', 'guifg' : 'Green'},
        'Search' : {'ctermfg' : '0', 'guifg' : 'Black'},
        'SignColumn' : {'ctermbg' : '242', 'ctermfg' : '14', 'guifg' : 'Cyan'},
        'Special' : {'ctermfg' : '224', 'guifg' : 'Orange'},
        'SpecialKey' : {'ctermfg' : '81', 'guifg' : 'Cyan'},
        'SpellBad' : {'ctermbg' : '9'},
        'SpellCap' : {'ctermbg' : '12'},
        'SpellLocal' : {'guisp' : 'Cyan'},
        'SpellRare' : {'ctermbg' : '13'},
        'Statement' : {'ctermfg' : '11', 'guifg' : '#ffff60'},
        'TabLine' : {'ctermbg' : '242', 'ctermfg' : '15',
                     'guibg' : 'DarkGrey'},
        'Title' : {'ctermfg' : '225'},
        'Type' : {'ctermfg' : '121', 'guifg' : '#60ff60'},
        'Underlined' : {'ctermfg' : '81', 'guifg' : '#80a0ff'},
        'Visual' : {'ctermbg' : '242', 'guibg' : 'DarkGrey'},
        'WarningMsg' : {'ctermfg' : '224'},
    }

    _light_defaults = {
        'Comment' : {'ctermfg' : '4', 'guifg' : 'Blue'},
        'Constant' : {'ctermfg' : '1', 'guifg' : 'Magenta'},
        'CursorColumn' : {'ctermbg' : '7', 'guibg' : 'Grey90'},
        'CursorLine' : {'guibg' : 'Grey90'},
        'DiffAdd' : {'ctermbg' : '81', 'guibg' : 'LightBlue'},
        'DiffChange' : {'ctermbg' : '225', 'guibg' : 'LightMagenta'},
        'DiffDelete' : {'ctermbg' : '159', 'guibg' : 'LightCyan'},
        'Directory' : {'ctermfg' : '4', 'guifg' : 'Blue'},
        'FoldColumn' : {'ctermbg' : '248', 'ctermfg' : '4',
                        'guifg' : 'DarkBlue'},
        'Folded' : {'ctermbg' : '248', 'ctermfg' : '4', 'guibg' : 'LightGrey',
                    'guifg' : 'DarkBlue'},
        'Identifier' : {'ctermfg' : '6', 'guifg' : 'DarkCyan'},
        'Ignore' : {'ctermfg' : '15'},
        'LineNr' : {'ctermfg' : '130', 'guifg' : 'Brown'},
        'MatchParen' : {'ctermbg' : '14', 'guibg' : 'Cyan'},
        'MoreMsg' : {'ctermfg' : '2'},
        'Pmenu' : {'ctermbg' : '225', 'guibg' : 'LightMagenta'},
        'PmenuSel' : {'ctermbg' : '7', 'guibg' : 'Grey'},
        'PreProc' : {'ctermfg' : '5', 'guifg' : 'Purple'},
        'Question' : {'ctermfg' : '2', 'guifg' : 'SeaGreen'},
        'SignColumn' : {'ctermbg' : '248', 'ctermfg' : '4',
                        'guifg' : 'DarkBlue'},
        'Special' : {'ctermfg' : '5', 'guifg' : 'SlateBlue'},
        'SpecialKey' : {'ctermfg' : '4', 'guifg' : 'Blue'},
        'SpellBad' : {'ctermbg' : '224'},
        'SpellCap' : {'ctermbg' : '81'},
        'SpellLocal' : {'guisp' : 'DarkCyan'},
        'SpellRare' : {'ctermbg' : '225'},
        'Statement' : {'ctermfg' : '130', 'guifg' : 'Brown'},
        'TabLine' : {'ctermbg' : '7', 'ctermfg' : '0', 'guibg' : 'LightGrey'},
        'Title' : {'ctermfg' : '5'},
        'Type' : {'ctermfg' : '2', 'guifg' : 'SeaGreen'},
        'Underlined' : {'ctermfg' : '5', 'guifg' : 'SlateBlue'},
        'Visual' : {'ctermbg' : '7', 'guibg' : 'LightGrey'},
        'WarningMsg' : {'ctermfg' : '1'},
    }

    _group_map = dict((group.lower(), group) for group
                      in _common_defaults.keys() + _dark_defaults.keys() +
                      _light_defaults.keys())

class LineProducer(object):
    _hi_matcher = re.compile(r'''
        (?P<head>[ \t]*"?[ \t]*)     # catches commented-out lines also
        (?P<command>
            hi(g(h(l(i(g(ht?)?)?)?)?)?)?
            [ \t]+
            (def(a(u(lt?)?)?)?[ \t]+)?
        )
        (?P<groupname>[A-Za-z0-9_]+)
        (?P<params>(
            [ \t]+
            (cterm[fb]g|c?term|start|stop|gui(fg|bg|sp)?|font)
            =
            [^ \t\n"]+               # NOTE: doesn't match quoted values
        )+)
        (?P<tail>
            [ \t]*                   # optional whitespace
            ("[^\n]*)?               # optional comment
            \n?                      # optional newline
        )
    ''', re.VERBOSE | re.IGNORECASE)

    _bad_link_matcher = re.compile(r'''
        [ \t]*
        hi(g(h(l(i(g(ht?)?)?)?)?)?)?
        [ \t]+
        (def(a(u(lt?)?)?)?[ \t]+)?
        link
        [ \t]+
        (SpecialKey|NonText|Directory|ErrorMsg|IncSearch|Search|MoreMsg
        |ModeMsg|LineNr|Question|StatusLine|StatusLineNC|VertSplit|Title
        |Visual|VisualNOS|WarningMsg|WildMenu|Folded|FoldColumn|DiffAdd
        |DiffChange|DiffDelete|DiffText|SignColumn|SpellBad|SpellCap|SpellRare
        |SpellLocal|Pmenu|PmenuSel|PmenuSbar|PmenuThumb|TabLine|TabLineSel
        |TabLineFill|CursorColumn|CursorLine|Cursor|lCursor|MatchParen|Comment
        |Constant|Special|Identifier|Statement|PreProc|Type|Underlined|Ignore
        |Error|Todo)\b
    ''', re.VERBOSE | re.IGNORECASE)

    _line_matcher = re.compile(r'.*\n?')

    _contline_matcher = re.compile(r'[^\n]*(\n[ \t]*\\[^\n]*)*\n?')
    _continue_matcher = re.compile(r'\n[ \t]*\\')

    def __init__(self, data):
        self._data = data

    def _joined_line(self):
        lines = self._contline_matcher.match(self._data).group()
        joined = self._continue_matcher.sub('', lines)
        return (joined, len(lines))

    def __iter__(self):
        while self._data:
            (joined, i) = self._joined_line()
            m = self._hi_matcher.match(joined)
            if m:
                yield HighlightLine(m)
            else:
                m = self._line_matcher.match(self._data)
                line = m.group()
                if self._bad_link_matcher.match(line):
                    print >> sys.stderr, 'Warning: likely bad link.'
                    print >> sys.stderr, line.strip()
                i = len(line)
                yield line

            self._data = self._data[i:]

class HighlightLine(object):
    def __init__(self, match):
        self.group = match.group('groupname')
        head = match.group('head')

        self._head = '%s%s%s' % (head, match.group('command'), self.group)
        self._params = match.group('params')
        self._tail = match.group('tail')
        self.comment = '"' in head

    _param_matcher = re.compile(r'''
        (?P<param>(cterm[fb]g|c?term|start|stop|gui(fg|bg|sp)?|font))
        =
        (?P<value>[^ \t]+)
    ''', re.VERBOSE | re.IGNORECASE)

    def get_param(self, param):
        '''
        Return the value for the given param, or None if the param doesn't
        exist in the line.
        '''
        for m in self._param_matcher.finditer(self._params):
            if m.group('param').lower() == param:
                return m.group('value')

        return None

    def _replace(self, new_params, match):
        '''
        Helper for updated().
        '''
        param = match.group('param')
        param_norm = param.lower()
        if param_norm in new_params:
            value = new_params[param_norm]
            new_params.pop(param_norm)
            return '%s=%s' % (param, value)
        else:
            return match.group()

    def updated(self, new_params):
        '''
        Return a new line using new_params. The new parameters replace
        existing parameters when possible, or they get appended to the line.
        '''
        unused_params = dict(new_params)
        repl = lambda m: self._replace(unused_params, m)
        param_str = self._param_matcher.sub(repl, self._params)

        append_params = ' '.join('%s=%s' % (param, value)
                                 for (param, value) in unused_params.items())
        if append_params:
            append_params = ' ' + append_params

        return '%s%s%s%s' % (self._head, param_str, append_params, self._tail)

    def settings(self):
        '''
        return items from the line as a ColorSchemeSettings object
        '''
        result = ColorSchemeSettings()
        for m in self._param_matcher.finditer(self._params):
            # Try to normalize case
            value = m.group('value').lower()
            if value == 'none':
                value = 'NONE'

            result.add(self.group, m.group('param').lower(), value)

        return result

def cterm_color(gui_color):
    '''
    Return the cterm color corresponding to gui_color. This might not be a
    color at all if gui_color is none, fg, or bg.
    '''
    if gui_color.lower() in ('none', 'fg', 'bg'):
        return gui_color

    c = color.Color.from_string(gui_color)
    return str(c.nearest_xterm())

def cterm_attrs(gui_attrs):
    '''
    Return the cterm attributes based on gui_attrs. This means dropping
    attributes that don't work on the terminal.
    '''
    if gui_attrs.lower() == 'none':
        return gui_attrs

    attrs = [attr.strip() for attr in gui_attrs.split(',')]
    new_attrs = []
    for attr in attrs:
        if attr.lower() in ['bold', 'underline', 'reverse', 'inverse',
                            'standout']:
            new_attrs.append(attr)

    if new_attrs:
        return ','.join(new_attrs)
    else:
        return 'NONE'

def find_params(hl):
    '''
    Find cterm parameters based on existing gui parameters.
    '''
    result = {}

    undercurl = None
    gui = hl.get_param('gui')
    if gui:
        result['cterm'] = cterm_attrs(gui)

        if 'undercurl' in gui:
            undercurl = hl.get_param('guisp')

    guifg = hl.get_param('guifg')
    if guifg:
        result['ctermfg'] = cterm_color(guifg)

    guibg = hl.get_param('guibg')
    if guibg and guibg.lower() not in ['none', 'bg']:
        result['ctermbg'] = cterm_color(guibg)
    elif undercurl:
        # Fall back on undercurl color
        result['ctermbg'] = cterm_color(undercurl)
    elif guibg:
        result['ctermbg'] = guibg

    return result

class SettingsValidator(object):
    def __init__(self, settings, dark):
        if dark:
            self.settings = ColorSchemeSettings.dark_defaults()
        else:
            self.settings = ColorSchemeSettings.light_defaults()
        self.settings.update(settings)
        self.settings.fill()

    def validate(self):
        '''
        try to validate settings, reporting issues on stderr.
        '''
        recommended = ColorSchemeSettings()
        for group in self.settings.groups():
            recommended.update(self._validate_group(group))

        if recommended:
            print >> sys.stderr, "Warning: some default values won't look right."
            print >> sys.stderr, 'You might want to try adding these:'
            for group in sorted(recommended.groups()):
                params = recommended.get_group(group)
                param_str = ' '.join('%s=%s' % (pname, pval) for (pname, pval)
                                     in sorted(params.items()))
                line = 'hi %s %s' % (group, param_str)
                print >> sys.stderr, line

    def _validate_group(self, group):
        # This assumes all gui and cterm parameters are present
        # because they should come from the Default object.
        params = self.settings.get_group(group)
        recommended = {} # {'param' : 'value'}
        recommended.update(self._validate_attrs(params))
        recommended.update(self._validate_fg(params))
        recommended.update(self._validate_bg(params))

        result = ColorSchemeSettings()
        if recommended:
            result.update({group : recommended})
        return result

    def _validate_attrs(self, params):
        # Convert gui attrs to cterm attrs and check equality.
        result = {}
        gui = params['gui']
        cterm = params['cterm']
        if cterm_attrs(gui) != cterm:
            result['gui'] = gui

        return result

    def _validate_fg(self, params):
        result = {}
        gui = params['guifg']
        cterm = params['ctermfg']
        if cterm_color(gui) != cterm:
            result['guifg'] = gui

        return result

    def _validate_bg(self, params):
        result = {}
        gui = params['guibg']
        cterm = params['ctermbg']
        use_undercurl = False
        if gui in ['NONE', 'bg'] and 'undercurl' in params['gui']:
            gui = params['guisp']
            use_undercurl = True

        if cterm_color(gui) != cterm:
            if use_undercurl:
                result['gui'] = params['gui']
                result['guisp'] = params['guisp']
            else:
                result['guibg'] = params['guibg']

        return result

def parse_args(args):
    parser = optparse.OptionParser()

    parser.add_option('-l', '--light', action='store_true',
        help='use light background defaults')

    (opts, arguments) = parser.parse_args(args)
    return (opts, arguments)

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    global opts
    (opts, arguments) = parse_args(args)

    assert len(arguments) == 1
    filename = arguments[0]

    dark = not opts.light

    lines = LineProducer(open(filename).read())
    settings = ColorSchemeSettings()

    for line in lines:
        if isinstance(line, HighlightLine):
            params = find_params(line)
            sys.stdout.write(line.updated(params))
            if not line.comment:
                settings.update(line.settings())
                settings.update({line.group : params})
        else:
            sys.stdout.write(line)

    validator = SettingsValidator(settings, dark)
    validator.validate()

    return 0

if __name__ == '__main__':
    sys.exit(main())
